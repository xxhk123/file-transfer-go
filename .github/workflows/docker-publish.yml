name: 🐳 Build ARM64 Docker Image (RK3588 Ready)

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v1.0.5)'
        required: true
        default: 'v1.0.5'
        type: string

jobs:
  build-arm64:
    name: 🏗️ Build ARM64 Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ⬇️ Download official Linux ARM64 binary
        run: |
          # 替换下面 URL 为官方 Linux ARM64 二进制或压缩包链接
          BINARY_URL="https://example.com/file-transfer-go-${{ github.event.inputs.version }}-linux-arm64"
          FILE_NAME="server_download"

          curl -L -o $FILE_NAME $BINARY_URL

          # 判断文件类型
          FILE_TYPE=$(file $FILE_NAME)
          echo "Downloaded file type: $FILE_TYPE"

          if [[ $FILE_TYPE == *"gzip compressed data"* ]]; then
            tar -xzf $FILE_NAME -C .
          elif [[ $FILE_TYPE == *"Zip archive data"* ]]; then
            unzip $FILE_NAME -d .
          else
            # 假设是直接二进制，重命名为 server
            mv $FILE_NAME server
          fi

          chmod +x server

      - name: 🐳 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: false
          load: true
          tags: file-transfer-go:arm64-${{ github.event.inputs.version }}

      - name: 📦 Save Docker image as TAR
        run: |
          docker save file-transfer-go:arm64-${{ github.event.inputs.version }} -o file-transfer-go-arm64-${{ github.event.inputs.version }}.tar

      - name: 📤 Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: file-transfer-go-arm64
          path: file-transfer-go-arm64-${{ github.event.inputs.version }}.tar
          retention-days: 1
